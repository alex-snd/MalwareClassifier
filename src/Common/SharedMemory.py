from multiprocessing import Manager, Lock


class SharedFeatureVec(object):
    def __init__(self, manager: Manager) -> None:
        self._n = 3691
        self._feature_vec = manager.list([0 for _ in range(self._n)])
        self._feature_vec_lock = Lock()

    def set_position(self, pos: int, value: int = 1, zero_pos: bool = False) -> None:
        with self._feature_vec_lock:
            if self._feature_vec[pos] != 0 and not zero_pos:
                print(f'Position {pos} has already been overwritten')

            self._feature_vec.pop(pos)
            self._feature_vec.insert(pos, value)

    def get_vec(self) -> list:
        return list(self._feature_vec)


class SharedExtractionFunctions(object):
    def __init__(self, extraction_functions: list, manager: Manager) -> None:
        self._extraction_functions = manager.list(extraction_functions)
        self._extraction_functions_lock = Lock()

    def __bool__(self) -> bool:
        with self._extraction_functions_lock:
            return False if len(self._extraction_functions) == 0 else True

    def get_function(self) -> eval or None:
        with self._extraction_functions_lock:
            if len(self._extraction_functions) != 0:
                return self._extraction_functions.pop()
            else:
                return None


class SharedReportsFeatures(object):
    def __init__(self, manager: Manager) -> None:
        self._reports_feature = manager.list()
        self._reports_feature_lock = Lock()

    def add_report_feature(self, report_feature: list) -> None:
        with self._reports_feature_lock:
            self._reports_feature.append(report_feature)

    def get_reports_features(self) -> list:
        return list(self._reports_feature)


class SharedReportPaths(object):
    def __init__(self, report_paths: list, manager: Manager) -> None:
        self._report_paths = manager.list(report_paths)
        self._report_paths_lock = Lock()

    def __bool__(self) -> bool:
        with self._report_paths_lock:
            return False if len(self._report_paths) == 0 else True

    def get_report_path(self) -> str or None:
        with self._report_paths_lock:
            if len(self._report_paths) != 0:
                return self._report_paths.pop()
            else:
                return None


if __name__ == '__main__':
    pass
