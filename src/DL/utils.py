import math
from math import sqrt
from os import listdir
from os.path import join, basename

import matplotlib.pyplot as plt
import moviepy.editor as mpy
import numpy as np
from torch import nn

from src.Common import config
from src.Common.utils import get_data_base


def loss_visualization(training_space: dict, loss_history: dict, i_epoch: int, max_ticks: int = 15) -> None:
    loss_history_len = len(loss_history['loss'])
    per_epoch = loss_history_len // i_epoch - 1

    x_ticks = np.arange(0, loss_history_len - per_epoch, per_epoch + 1)
    x_labels = np.array([str(ep) for ep in np.arange(1, i_epoch + 1)])

    fig, ax = plt.subplots(figsize=(19.2, 10.8))

    ax.plot(np.arange(loss_history_len - per_epoch)[per_epoch:], loss_history['loss'][per_epoch:-per_epoch],
            color='lavender')
    ax.plot(x_ticks, loss_history['valid_loss'], label='Validation loss', color='springgreen')
    ax.plot(x_ticks, loss_history['avg_loss'], label='Train loss', color='royalblue')

    if len(x_ticks) > max_ticks:
        mask = np.linspace(start=0, stop=len(x_ticks) - 1, num=15, dtype=np.int32)
        x_ticks = x_ticks[mask]
        x_labels = x_labels[mask]

    ax.set_title(f'Loss changing')
    ax.set_ylabel('Loss')
    ax.set_xlabel('Epoch')
    ax.set_xticks(x_ticks)
    ax.set_xticklabels(x_labels)
    ax.set_ybound(lower=0)
    ax.legend()

    fig.tight_layout()

    plt.savefig(join(training_space['loss'], f'{training_space["mark"]}__epoch_{i_epoch}.png'), dpi='figure',
                format='png', bbox_inches='tight')
    plt.clf()
    plt.close('all')


def save_parameters(model: nn.Module, training_space: dict, i_epoch: int) -> None:
    model.save_parameters(filename=join(training_space['parameters'], f'{training_space["mark"]}__epoch_{i_epoch}'))


def array_to_image(array: np.ndarray) -> np.ndarray:
    array = array.reshape(-1)
    array_size = len(array)
    image_size = math.ceil(sqrt(array_size))

    image = np.zeros(image_size * image_size)
    image[:array_size] = array

    # use custom params for other color scheme
    image -= image.mean()
    image /= (image.std() + 1e-5)
    image *= 0.1
    image += 0.5
    image = np.clip(image, 0, 1)
    image *= 255
    image = np.clip(image, 0, 255).astype('uint8')

    return image.reshape((image_size, image_size))


def create_image(array: np.ndarray, name: str) -> None:
    plt.figure(figsize=(20, 20))
    plt.tight_layout()
    plt.imshow(array)
    plt.savefig(join(config.visualization_path, f'{name}.png'), dpi=600, format='png', bbox_inches='tight')

    plt.clf()
    plt.close('all')


def create_gif(images_path: str, gif_name: str = 'latent_space', fps: int = 8) -> None:
    def by_len(s: str):
        s = basename(s)
        s = s.split('_')[2]
        s = s.split('.')[0]

        return int(s)

    file_list = [join(images_path, file_name) for file_name in listdir(images_path)]
    file_list = sorted(file_list, key=by_len)

    clip = mpy.ImageSequenceClip(file_list, fps=fps)
    clip.write_gif(join(images_path, f'{gif_name}.gif'), fps=fps)


if __name__ == '__main__':
    data_base = get_data_base('database.csv', labels=False)
    arr = array_to_image(data_base.loc[0].copy().to_numpy())

    create_image(arr, name='image_0')

    pass
