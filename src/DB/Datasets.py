import numpy as np
from torch.utils.data import Dataset

from src.Common.utils import get_data_base


class UnLabeledDataSet(Dataset):
    def __init__(self, data_base_file: str) -> None:
        self._data_base = get_data_base(data_base_file, labels=False)
        self.length = len(self._data_base)
        self.sample_size = self._data_base.shape[1]

    def __getitem__(self, index: int) -> np.ndarray:
        return self._data_base.iloc[index].copy().to_numpy().astype(np.float32)

    def __len__(self) -> int:
        return self.length


class LabeledDataSet(Dataset):
    def __init__(self, data_base_file: str, one_hot: bool = False) -> None:
        self._data_base = get_data_base(data_base_file, labels=True)
        self.n_classes = len(self._data_base[self._data_base.columns[1]].unique())
        self.length = len(self._data_base)
        self.sample_size = self._data_base.shape[1] - 2
        self.one_hot = one_hot

    def _one_hot(self, label: int) -> np.ndarray:
        target = np.zeros(self.n_classes)
        target[label] = 1

        return target

    def __getitem__(self, index: int) -> (np.ndarray, int):
        sample = self._data_base.iloc[index].copy().to_numpy()[1:].astype(np.float32)

        if self.one_hot:
            return sample[1:], self._one_hot(int(sample[0]))
        else:
            return sample[1:], sample[0]

    def __len__(self) -> int:
        return self.length


class EntireDataSet(Dataset):
    def __init__(self, data_base_file: str) -> None:
        self.data_base_file = data_base_file
        self._data_base = get_data_base(data_base_file, labels=True)
        self.length = len(self._data_base)
        self.sample_size = self._data_base.shape[1] - 2

    def __getitem__(self, index: int) -> (np.ndarray, list):
        sample = self._data_base.iloc[index].copy().to_numpy()[2:].astype(np.float32)
        mark = self._data_base.iloc[index].copy()[:2]
        return sample, list(mark)

    def __len__(self) -> int:
        return self.length
